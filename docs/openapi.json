{
  "openapi": "3.0.0",
  "info": {
    "title": "Personelim API",
    "version": "1.0.0",
    "description": "Node.js backend API for personnel management system with authentication, employee management, leaves, advances, timesheets, payrolls, and salary payments.",
    "contact": {
      "name": "API Support",
      "email": "support@personelim.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://personelim-be.vercel.app",
      "description": "Production server (Vercel)"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: 'Bearer {token}'"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "name": {
            "type": "string",
            "description": "User full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address"
          },
          "role": {
            "type": "string",
            "enum": ["owner", "manager", "employee"],
            "description": "User role in the system"
          },
          "businessId": {
            "type": "string",
            "description": "Business identifier"
          },
          "employeeId": {
            "type": "string",
            "description": "Employee identifier (for employee role)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Account creation timestamp"
          }
        }
      },
      "Employee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Employee unique identifier"
          },
          "userId": {
            "type": "string",
            "description": "Associated user account ID"
          },
          "firstName": {
            "type": "string",
            "description": "Employee first name"
          },
          "lastName": {
            "type": "string",
            "description": "Employee last name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Employee email address"
          },
          "position": {
            "type": "string",
            "description": "Job position"
          },
          "department": {
            "type": "string",
            "description": "Department name"
          },
          "contractType": {
            "type": "string",
            "enum": [
              "Belirsiz Süreli",
              "Belirli Süreli",
              "Kısmi Süreli",
              "Çağrı Üzerine",
              "Deneme Süreli"
            ],
            "description": "Type of employment contract"
          },
          "workMode": {
            "type": "string",
            "enum": [
              "Tam Zamanlı",
              "Yarı Zamanlı",
              "Part-time",
              "Hibrit",
              "Uzaktan (Remote)"
            ],
            "description": "Work mode"
          },
          "workingHoursPerDay": {
            "type": "number",
            "description": "Working hours per day"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "Employment start date (YYYY-MM-DD)"
          },
          "terminationDate": {
            "type": "string",
            "format": "date",
            "description": "Termination date if employee is inactive"
          },
          "salary": {
            "type": "object",
            "properties": {
              "grossAmount": {
                "type": "number"
              },
              "netAmount": {
                "type": "number"
              },
              "currency": {
                "type": "string"
              },
              "bankName": {
                "type": "string"
              },
              "iban": {
                "type": "string"
              }
            }
          },
          "insuranceInfo": {
            "type": "object",
            "properties": {
              "sicilNo": {
                "type": "string"
              },
              "startDate": {
                "type": "string",
                "format": "date"
              }
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the employee is active"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Validation error details"
          }
        }
      },
      "Success": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "data": {
            "type": "object",
            "description": "Response data"
          },
          "token": {
            "type": "string",
            "description": "JWT token (for auth endpoints)"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization"
    },
    {
      "name": "Employees",
      "description": "Employee management operations"
    },
    {
      "name": "System",
      "description": "System health and status endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "tags": ["Authentication"],
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password"],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 50,
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)",
                    "example": "Password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "User login",
        "tags": ["Authentication"],
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "Password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        },
                        "token": {
                          "type": "string",
                          "description": "JWT authentication token"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "summary": "Get current user information",
        "tags": ["Authentication"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Success"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "User logout",
        "tags": ["Authentication"],
        "security": [],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check endpoint",
        "tags": ["System"],
        "security": [],
        "responses": {
          "200": {
            "description": "API health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "OK"
                    },
                    "message": {
                      "type": "string",
                      "example": "Personelim API is running"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "firestore": {
                      "type": "string",
                      "enum": ["Connected", "Disconnected", "Error"]
                    },
                    "database": {
                      "type": "string",
                      "example": "Firestore"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message if firestore connection fails"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employees/contract-types": {
      "get": {
        "summary": "Get available contract types",
        "tags": ["Employees"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Contract types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Contract types retrieved successfully"
                    },
                    "contractTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Belirsiz Süreli",
                        "Belirli Süreli",
                        "Kısmi Süreli",
                        "Çağrı Üzerine",
                        "Deneme Süreli"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/employees/work-modes": {
      "get": {
        "summary": "Get available work modes",
        "tags": ["Employees"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Work modes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Work modes retrieved successfully"
                    },
                    "workModes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Tam Zamanlı",
                        "Yarı Zamanlı",
                        "Part-time",
                        "Hibrit",
                        "Uzaktan (Remote)"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
